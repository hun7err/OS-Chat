#include <unistd.h>
#include <sys/shm.h>
#include <sys/stat.h>
//#include <sys/types.h>
#include <sys/sem.h>
//#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <fcntl.h>
#include "chat.h"
#include "sem.h"
#include <signal.h>
#include <string.h>

#define KEY 0x666

void gettime(char *buf, time_t *t);

int msgid;

void sighandler(int signum) {
	if(signum == SIGINT) {
		printf("Przechwycono SIGINT: wychodze...\n");
		// 1. usun swoja kolejke komunikatow
		if(msgctl(msgid, IPC_RMID, NULL) == -1) {
			perror("Nie mozna usunac kolejki komunikatow");
			exit(-1);
		}
		// sprawdz czy sa inne serwery
		// jak nie to usun SHM
		// i usun SEM
	}
}

int logfile(const char *message, int semid);

int main(int argc, char ** argv) {
	const char *filename = "/tmp/czat.log";
	char buff[30];
	time_t t;
	int semid, shmid;

	short sem[3] = {1, 1, 1};
	// 0 - lista serwerow, 1 - lista klientow, 2 - plik logu

	semid = semget(KEY, 3, IPC_CREAT | IPC_EXCL | 0777);
	shm_type *shared;

	if(semid == -1) {	// zestaw semaforow istnieje
		while(1) {
			shmid = shmget(KEY, sizeof(shm_type), 0);
			if(shmid != -1) break;
		}
	} else {	// zestaw sem. nie istnieje
		shmid = shmget(KEY, sizeof(shm_type), IPC_CREAT|0777);
		if(shmid == -1) {
			gettime(buff, &t);
			//printf("%s ", buff);
			perror("Nie mozna utworzyc SHM");
			return -1;
		}
	}	
	if((shared = (shm_type*)shmat(shmid,NULL,0)) == (void*)(-1)) {
		perror("Blad podlaczania segmentu");
		return -1;
	}
	
	if(semid != -1) {
		shared->id_semaphores = semid;
		semctl(semid, 0, SETALL, sem);
	} else semid = shared->id_semaphores;
	// czyszczenie
	int i = 0;
	p(semid, SERVER);
	for(; i < MAX_SERVER_COUNT; i++) {
		shared->servers[i].queue_id = -1;
	}
	v(semid, SERVER);
	p(semid, CLIENT);
	for(i = 0; i < MAX_SERVER_COUNT*MAX_USER_COUNT_PER_SERVER; i++) {
		shared->clients[i].queue_id = -1;
	}
	v(semid, CLIENT);

	if(shmdt(shared) == -1) {
		perror("Blad odlaczania segmentu");
		return -1;
	}

	signal(SIGINT, sighandler);

	gettime(buff, &t);
	printf("%s Online. SHM id: %d, SEM id: %d\n", buff, shmid, semid);
	printf("%s Tworzenie kolejki komunikatow\n", buff);
	
	msgid = msgget(IPC_PRIVATE, IPC_CREAT|0777);
	gettime(buff, &t);
	printf("%s Mam kolejke, id: %d. Time for rock'n'roll!\n", buff, msgid);
	//p(semid, 2);

	char buf[512];
	sprintf(buf, "%s [%d] Serwer wystartowal, let the show begin!\n", buff, msgid);
	if(logfile(buf,semid) == -1) {
		printf("Blad zapisu do pliku logu\n");
		return -1;
	}

	//v(semid, 2);
	gettime(buff, &t);

	// dopisz sie do listy serwerow

	// p na semaforze od SHM
	// dodaj id semaforow
	// v na semaforze od SHM
	//while(1);

	// najpierw tutaj tworz semafory, jak nie uda sie to wyjdz - nie blokuj gdy nie masz semaforow
	gettime(buff, &t);
	sprintf(buf, "%s [%d] Serwer kopnal w kalendarz :(\n", buff, msgid);
	logfile(buf,semid);
	printf("%s Serwer konczy dzialanie\n", buff);
	
	return 0;
}

void gettime(char *buf, time_t *t) {
	//char buff[30];
	*t = time(NULL);
	strftime(buf, 30, "%Y-%m-%dT%H:%M:%S%z", localtime(t));
}

int logfile(const char *message, int semid) {
	p(semid, LOG);
	int fd = open("/tmp/czat.log", O_RDWR | O_CREAT, 0777);
	if(fd == -1) return -1;
	if(lseek(fd,0,SEEK_END) == -1) return -1;
	if(write(fd, message, strlen(message)) == -1) return -1;
	close(fd);
	v(semid, LOG);
	return 0;
}
